//https://www.hackster.io/chshammill/pms-5003-laser-air-sensor-with-photon-2e8e05


// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_DHT.h>

// This #include statement was automatically added by the Particle IDE.
//#include "Ubidots.h"

TCPClient client; 

#define THINGNAME "wombaa2" //change the name in the " " can be anything.  "upstairsbath"  This is for naming your device on dweet.io
// I use the name that is given to the photon.  Don't use spaces.
// DHT parameters
// DHT parameters
#define DHTPIN 5
#define DHTTYPE DHT22

//#define TOKEN "A1E-"  // Put here your Ubidots TOKEN
//Ubidots ubidots(TOKEN);
//ubidots.setDatasourceName(DATA_SOURCE_NAME); //This name will automatically show up in Ubidots the first time you post data. 
// Variables
int SLEEPLED = D7;  //Use the builtin LED on pin 7 to determine when it is awake and asleep. off = asleep, on = awake
int REDled = D1;
int GREENled = D2;
int BLUEled = D3;
int LEDpower = D0; //this pin will power the LED

float temperature; //= 25;
float humidity; //= 25;
float brightness = 40;  // this is how bright you want the LED.  0 is off, 255 is full brightness.  You can change this

long pm10 = 0;
long pm25 = 0;
long pm100 = 0;
long filter = 0;
String colour;

uint8_t wake[] = { 0x42, 0x4D, 0xE4, 0x00, 0x01, 0x01, 0x74 };
uint8_t sleep1[] = { 0x42, 0x4D, 0xE4, 0x00, 0x00, 0x01, 0x73 };
//uint8_t sleep[] = { 0x42, 0x4D, 0xE4, 0x00, 0x00, 0x01, 0x73 };

DHT dht(DHTPIN, DHTTYPE);


 void setup() {
  Serial.begin(9600);
  Serial1.begin(9600);
   dht.begin();
   pinMode(REDled, OUTPUT);
   pinMode(GREENled, OUTPUT);
   pinMode(BLUEled, OUTPUT);
   pinMode(LEDpower, OUTPUT);
   analogWrite(LEDpower, brightness); //turns on the LEDpower pin to whatever brightness power you have choosen.  It will stay on.
   pinMode(SLEEPLED, OUTPUT);
}



 void loop() {
     // digitalWrite(SLEEPLED, HIGH);
      delay(10000);
     
     Serial1.write(wake, sizeof(wake));
     Serial.print("Awake");
      
     delay(20000);
    
     
    
     
  int index = 0;
  char value;
  char previousValue;
   while (Serial1.available()) {
    value = Serial1.read();
    if ((index == 0 && value != 0x42) || (index == 1 && value != 0x4d)){
      Serial.println("Cannot find the data header.");
      break;
    }
     if (index == 4 || index == 6 || index == 8 || index == 10 || index == 12 || index == 14) {
      previousValue = value;
    }
    else if (index == 5){
      pm10 = 256 * previousValue + value;
      Serial.print("{ ");
      Serial.print("\"pm10\": ");
      Serial.print(pm10);
      Serial.print(", ");
    }
    else if (index == 7){
      pm25 = 256 * previousValue + value;
      Serial.print("\"pm25\": ");
      Serial.print(pm25);
      Serial.print(", ");
    }
    else if (index == 9){
      pm100 = 256 * previousValue + value;
      Serial.print("\"pm100\": ");
      Serial.print(pm100);
    } else if (index > 15) {
      break;
    }
    index++;
  }
  while(Serial1.available()) Serial1.read();
  Serial.println(" }");
  
   temperature = dht.getTempCelcius();  // Humidity measurement
   humidity = dht.getHumidity();  // Humidity measurement
   temperature = (temperature * 1.8) + 32; // Convert C to F
   
   
   //this section controls what color the LED is showing on different PM25 levels. HIGH = off  LOW = on  Feel free to change the cutoff numbers.
    if (pm25 < 10) //green
    {
        digitalWrite(REDled, HIGH);
        digitalWrite(GREENled, LOW);
        digitalWrite(BLUEled, HIGH);
        colour = "green";
        
    }
    if (pm25 < 20 && pm25 > 10)  // cyan
 {
        digitalWrite(REDled, HIGH);
        digitalWrite(GREENled, LOW);
        digitalWrite(BLUEled, LOW);
        colour = "cyan";
    }
     if (pm25 < 30 && pm25 > 20) // blue
 {
        digitalWrite(REDled, HIGH);
        digitalWrite(GREENled, HIGH);
        digitalWrite(BLUEled, LOW);
        colour = "blue";
    }
     if (pm25 < 40 && pm25 > 30) // magenta
 {
        digitalWrite(REDled, LOW);
        digitalWrite(GREENled, HIGH);
        digitalWrite(BLUEled, LOW);
        colour = "magenta";
    }
     if (pm25 < 100 && pm25 > 40)// red
 {
        digitalWrite(REDled, LOW);
        digitalWrite(GREENled, HIGH);
        digitalWrite(BLUEled, HIGH);
        colour = "red";
    }
       if (pm25 > 100)  // white
 {
        digitalWrite(REDled, LOW);
        digitalWrite(GREENled, LOW);
        digitalWrite(BLUEled, LOW);
        colour = "white";
    }
    //ends the LED control section
    
    
    // Publish data
    Particle.publish("temperature", String(temperature) + " Â°F", PRIVATE);
    delay(2000);
    Particle.publish("humidity", String(humidity) + "%");
    delay(2000);
    Particle.publish("pm25", String(pm25) + " ug/m3");
    delay(2000);
    Particle.publish("pm1", String(pm10) + " ug/m3");
    delay(2000);
    Particle.publish("pm10", String(pm100) + " ug/m3");
    delay(2000);
    Particle.publish("colour", String(colour));
    delay(2000);
    if (pm25 > 15 && filter == 0) { 
        filter = 1;
        Particle.publish("filter", String(filter));}
        
    if (pm25 < 10 && filter == 1) {
            filter = 0;
        Particle.publish("filter", String(filter));
        }
    
  
  
  
  
  
  
  if (client.connect("dweet.io", 80))  
    // Go to  http://dweet.io/follow/thingname  to see the results in your browser. change "thingname" to your thingname
    {
 
      client.print("GET /dweet/for/");
      client.print(THINGNAME);
      client.print("?PM1=");  // Don't use spaces for data names
      client.print(pm10);
      client.print("&PM25=");  // Don't use spaces for data names
      client.print(pm25);
      client.print("&PM10=");  // Don't use spaces for data names
      client.print(pm100);
      client.print("&TempF=");  // Don't use spaces for data names
      client.print(temperature);
      client.print("&humidityPercent=");  // Don't use spaces for data names
      client.print(humidity);
      client.println(" HTTP/1.1");
      client.println("Host: dweet.io");
      client.println("Connection: close");
      client.println();
           } 
           // ends publishing to DWEET
           
   

uint8_t sleep[] = { 0x42, 0x4D, 0xE4, 0x00, 0x00, 0x01, 0x73 };

   Serial1.write(sleep, sizeof(sleep));
   delay(3000);
  // digitalWrite(SLEEPLED, LOW);
   Serial.print("Asleep");
  
  delay(120000);
  
} 
